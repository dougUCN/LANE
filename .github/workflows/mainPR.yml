name: MainPR

on:
  push:
    branches: [github_actions]
  pull_request:
    branches: [github_actions]
  workflow_call:

env: # Note that env variables only accessible from within a `steps` context
  PYTHON_VERSION: 3.6.9
  NODE_VERSION: 16
  FE_ENDPOINT: http://localhost:3000/
  LINTING_BRANCH: github_actions # Branch upon whcih to apply linters

jobs:
  python_black_checks:
    # utilize github actions super-linter with built-in python black
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Python black code check
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: ${{ env.LINTING_BRANCH }}
          FILTER_REGEX_INCLUDE: .*server/.* # Only lint inside server folder
          VALIDATE_PYTHON_BLACK: true
          PYTHON_BLACK_CONFIG_FILE: server/pyproject.toml

  eslint_checks:
    # utilize github actions super-linter with built-in eslint
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: ESlint code check
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: ${{ env.LINTING_BRANCH }}
          FILTER_REGEX_INCLUDE: .*client/src/**/*.{ts,tsx} # Only lint typescript in client/src
          VALIDATE_TYPESCRIPT_ES: true
          TYPESCRIPT_ES_CONFIG_FILE: client.eslintrc

  BE_server_runs_and_passes_tests:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install python dependencies
        working-directory: server
        run: |
          pip install --upgrade pip
          pip install -r dependencies.txt

      - name: Generate secret key and security file
        working-directory: server
        run: python tests/genSecurityFile.py --debug True

      - name: Generate live database
        working-directory: server
        run: python manage.py migrate --database=live

      - name: Run BE in background
        working-directory: server
        run: |
          daphne nEDM_server.asgi:application &
          sleep 1

      - name: Unit tests
        working-directory: server
        run: pytest tests

  FE_server_runs:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install python dependencies
        working-directory: server
        run: |
          pip install --upgrade pip
          pip install -r dependencies.txt

      - name: Generate secret key and security file
        working-directory: server
        run: python tests/genSecurityFile.py --debug True

      - name: Run BE in background
        working-directory: server
        run: |
          daphne nEDM_server.asgi:application &

      - name: Set up Node js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node dependencies
        working-directory: client
        run: npm ci

      - name: Get schema from BE and generate Tsx file
        working-directory: client
        run: npm run generate

      - name: Run FE in background
        working-directory: client
        run: |
          npm start &
          sleep 1

      - name: Ping FE
        working-directory: client
        run: curl ${{ env.FE_ENDPOINT }} -I
