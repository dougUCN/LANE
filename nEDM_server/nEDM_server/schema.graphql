type Query {
    "Retrieves a histogram corresponding to `id`"
    getHistogram( id:ID! ): Histogram
    

    """
    Applies optional filters to retrieve a list of histograms. 
    """
    getHistograms(  ids: [ID],
                    minDate: Datetime, maxDate: Datetime,
                    minBins: Int, maxBins:Int,
                    types: [String], isLive: Boolean,
                ): [Histogram]

    "Lists all IDs of histograms in the database"
    listHistograms( isLive: Boolean ): [ID]
}

type Mutation {
    """
    Creates a histogram in the database

    IF `isLive`, alters the Live database. Default = False
    """
    createHistogram( hist: HistogramInput! ): HistogramPayload!

    """
    Updates an existing histogram with using type `HistogramInput`

    `nbins` is calculated automatically from `data` if unspecified.

    `type` is only updated if specified.

    IF `isLive`, alters the Live database. Default = False
    """
    updateHistogram( hist: HistogramInput! ): HistogramPayload!

    """
    Deletes a histogram in the database

    IF `isLive`, alters the Live database. Default = False
    """
    deleteHistogram( id:ID! , isLive: Boolean): HistogramPayload!

    "Confirms validity of a token"
    verifyToken(token: String!): VerifyToken

    "Obtain a brand new token with renewed expiration time for non-expired tokens"
    refreshToken(token: String!): RefreshToken

    "Authenticates the user and obtains a JSON Web Token"
    tokenAuth(username: String!, password:String!): TokenAuth
}

type Subscription {
    """
    Applies optional filters to retrieve a list of live histograms. 
    """
    getLiveHistograms: [Histogram]
}
